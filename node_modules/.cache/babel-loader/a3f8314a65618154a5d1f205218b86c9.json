{"ast":null,"code":"var _jsxFileName = \"/Users/kich555/Desktop/Development/react/React-Practice/src/App.js\";\nimport React, { useRef, useState, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from './Button';\nimport Hello from './Hello';\nimport Wrapper from './wrapper';\nimport Counter from './Counter';\nimport InputSample from './InputSample';\nimport CreateUser from './CreateUser';\nimport UserList from './UserList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppBlock = styled.div`\n  width: 512px;\n  margin: 0 auto;\n  margin-top: 4rem;\n  border: 1px solid black;\n  padding: 1rem;\n`;\n_c = AppBlock;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(AppBlock, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      children: \"BUTTON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App; // function countActiveUsers(users) {\n//   console.log('활성 사용자 수를 세는 중...');\n//   return users.filter((user) => user.active).length;\n// }\n// function App() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: '',\n//   });\n//   const { username, email } = inputs;\n//   const onChange = (e) => {\n//     const { name, value } = e.target;\n//     setInputs({\n//       ...inputs,\n//       [name]: value,\n//     });\n//   };\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'joan',\n//       email: 'public.joan@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'jenson',\n//       email: 'jenson@gmail.com',\n//       active: false,\n//     },\n//     {\n//       id: 3,\n//       username: 'kin',\n//       email: 'kin@gmail.com',\n//       active: false,\n//     },\n//   ]);\n//   const nextId = useRef(4);\n//   const onCreate = () => {\n//     // 나중에 구현 할 배열에 항목 추가하는 로직\n//     // ...\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email,\n//     };\n//     setUsers([...users, user]);\n//     setInputs({\n//       username: '',\n//       email: '',\n//     });\n//     nextId.current += 1;\n//   };\n//   const onRemove = (id) => {\n//     // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n//     // user.id 가 id인것을 제거함\n//     setUsers(users.filter((user) => user.id !== id));\n//   };\n//   const onToggle = (id) => {\n//     setUsers(\n//       users.map((user) =>\n//         user.id === id ? { ...user, active: !user.active } : user,\n//       ),\n//     );\n//   };\n//   const count = useMemo(() => countActiveUsers(users), [users]);\n//   // useMemo : useMemo 의 첫번째 파라미터 : 어떻게 연산할지 정의하는 함수\n//   // 두번째 파라미터 : deps 배열 (이 배열 안에 넣은 내용이 바뀌면) ? 우리가 등록한 함수를 호출해서 값을 연산 : 이전에 연산한 값을 재사용\n//   return (\n//     <>\n//       <Counter />\n//       {/* <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate}\n//       />\n//       <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n//       <div>활성사용자 수 : {count}</div> */}\n//     </>\n//   );\n// }\n// export default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppBlock\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/kich555/Desktop/Development/react/React-Practice/src/App.js"],"names":["React","useRef","useState","useMemo","styled","css","Button","Hello","Wrapper","Counter","InputSample","CreateUser","UserList","AppBlock","div","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,QAAiD,OAAjD;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAGT,MAAM,CAACU,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,Q;;AAQN,SAASE,GAAT,GAAe;AACb,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;MANQA,G;AAQT,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useRef, useState, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from './Button';\nimport Hello from './Hello';\nimport Wrapper from './wrapper';\nimport Counter from './Counter';\nimport InputSample from './InputSample';\nimport CreateUser from './CreateUser';\nimport UserList from './UserList';\n\nconst AppBlock = styled.div`\n  width: 512px;\n  margin: 0 auto;\n  margin-top: 4rem;\n  border: 1px solid black;\n  padding: 1rem;\n`;\n\nfunction App() {\n  return (\n    <AppBlock>\n      <Button>BUTTON</Button>\n    </AppBlock>\n  );\n}\n\nexport default App;\n\n// function countActiveUsers(users) {\n//   console.log('활성 사용자 수를 세는 중...');\n//   return users.filter((user) => user.active).length;\n// }\n\n// function App() {\n//   const [inputs, setInputs] = useState({\n//     username: '',\n//     email: '',\n//   });\n\n//   const { username, email } = inputs;\n\n//   const onChange = (e) => {\n//     const { name, value } = e.target;\n//     setInputs({\n//       ...inputs,\n//       [name]: value,\n//     });\n//   };\n\n//   const [users, setUsers] = useState([\n//     {\n//       id: 1,\n//       username: 'joan',\n//       email: 'public.joan@gmail.com',\n//       active: true,\n//     },\n//     {\n//       id: 2,\n//       username: 'jenson',\n//       email: 'jenson@gmail.com',\n//       active: false,\n//     },\n//     {\n//       id: 3,\n//       username: 'kin',\n//       email: 'kin@gmail.com',\n//       active: false,\n//     },\n//   ]);\n\n//   const nextId = useRef(4);\n\n//   const onCreate = () => {\n//     // 나중에 구현 할 배열에 항목 추가하는 로직\n//     // ...\n//     const user = {\n//       id: nextId.current,\n//       username,\n//       email,\n//     };\n\n//     setUsers([...users, user]);\n\n//     setInputs({\n//       username: '',\n//       email: '',\n//     });\n//     nextId.current += 1;\n//   };\n\n//   const onRemove = (id) => {\n//     // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬\n//     // user.id 가 id인것을 제거함\n//     setUsers(users.filter((user) => user.id !== id));\n//   };\n\n//   const onToggle = (id) => {\n//     setUsers(\n//       users.map((user) =>\n//         user.id === id ? { ...user, active: !user.active } : user,\n//       ),\n//     );\n//   };\n\n//   const count = useMemo(() => countActiveUsers(users), [users]);\n//   // useMemo : useMemo 의 첫번째 파라미터 : 어떻게 연산할지 정의하는 함수\n//   // 두번째 파라미터 : deps 배열 (이 배열 안에 넣은 내용이 바뀌면) ? 우리가 등록한 함수를 호출해서 값을 연산 : 이전에 연산한 값을 재사용\n\n//   return (\n//     <>\n//       <Counter />\n//       {/* <CreateUser\n//         username={username}\n//         email={email}\n//         onChange={onChange}\n//         onCreate={onCreate}\n//       />\n//       <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n//       <div>활성사용자 수 : {count}</div> */}\n//     </>\n//   );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}